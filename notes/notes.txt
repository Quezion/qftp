---~~~=== Wishlist Features ===~~~---
1) Daemonizing the FTP service
2) Running the app from within a REPL (allowing for live app editing)
3) CIDER and other nice Clojure goodies
4) Zach Tellman's "Manifold" library looked like a more elegant way to handle communication across sockets. With more time, I would've investigated this option more.
5) Pull the response codes out of each response and replace them with keyword :response-code. The response code would be inserted into the message.
6) Make the "session" map into a record
7) Documentation generator (Marginalia)
8) Refactor FTPL system to be macro based
9) Refactor qftp.file-system code to use Java Path class for more robust file-system handling
10)

---~~~=== Saju's Original Message ===~~~---
Implement just enough of https://www.ietf.org/rfc/rfc959.txt (original FTP RFC) to be able to do the following flow:

Login, mkdir a directory, cd into the directory, PUT a file, list the directory and GET the file back.

Constraints: Do not use a FTP library (if any). Concurrency is optional. Code should be commented with references back to RFC sections.

We will use the built-in OS-X/Linux(centos/ubuntu) ftp client to test the above flow. We will only test the happy path as described above.

-srp 
